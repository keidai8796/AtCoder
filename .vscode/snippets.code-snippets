{
	"AtCoder template": {
		"scope": "cpp",
		"prefix": "actemp",
		"body": [
		  "#include<bits/stdc++.h>",
		  "using namespace std;",
		  "#include<atcoder/all>",
		  "using namespace atcoder;",
		  "using mint=modint998244353;",
		  "using ll=long long;",
		  "#define rep(i,n) for(int i=0;i<n;i++)",
		  "",
		  "int main(){",
		  "    ",
		  "}"
		],
		"description": "AtCoder template"
	},
	"isPrime": {
		"scope": "cpp",
		"prefix": "isPrime",
		"body": [
		  "bool isPrime(long long n){",
		  "    if(n<2)return false;",
		  "    if(n==2)return true;",
		  "    if(n%2==0)return false;",
		  "    for(long long i=3;i*i<=n;i+=2)if(n%i==0)return false;",
		  "    return true;",
		  "}"
		],
		"description": "isPrime"
	},
	"lis": {
		  "scope": "cpp",
		"prefix": "lis",
		"body": [
		  "template<class T>",
		  "vector<T>lis(vector<T>&a,bool strict=true){",
		  "    vector<T>res;",
		  "    for(T x:a){",
		  "        class vector<T>::iterator it;",
		  "        if(strict)it=lower_bound(res.begin(),res.end(),x);",
		  "        else it=upper_bound(res.begin(),res.end(),x);",
		  "        if(it==res.end())res.push_back(x);",
		  "        else *it=x;",
		  "    }",
		  "    return res;",
		  "}"
		],
		"description": "lis"
	},
	"floor_sqrt": {
		"prefix": "floor_sqrt",
		"body": [
		  "long long floor_sqrt(long long n){",
		  "    long long ok=0;",
		  "    long long ng=min((long long)(1e9)+1,n);",
		  "    while(ok+1<ng){",
		  "        long long m=(ng+ok)/2;",
		  "        if(m*m<=n)ok=m;",
		  "        else ng=m;",
		  "    }",
		  "    return ok;",
		  "}"
		],
		"description": "floor_sqrt"
	},
	"ceil_sqrt": {
		"prefix": "ceil_sqrt",
		"body": [
		  "long long ceil_sqrt(long long n){",
		  "    long long ng=-1;",
		  "    long long ok=min((long long)(1e9),n);",
		  "    while(ng+1<ok){",
		  "        long long m=(ng+ok)/2;",
		  "        if(m*m>=n)ok=m;",
		  "        else ng=m;",
		  "    }",
		  "    return ok;",
		  "}"
		],
		"description": "ceil_sqrt"
	},
	"floor_qbrt": {
		"prefix": "floor_qbrt",
		"body": [
		  "long long floor_cbrt(long long n){",
		  "    long long ok=0;",
		  "    long long ng=min((long long)(1e6)+1,n);",
		  "    while(ok+1<ng){",
		  "        long long m=(ng+ok)/2;",
		  "        if(m*m*m<=n)ok=m;",
		  "        else ng=m;",
		  "    }",
		  "    return ok;",
		  "}"
		],
		"description": "floor_qbrt"
	},
	"ceil_qbrt": {
		"prefix": "ceil_qbrt",
		"body": [
		  "long long ceil_cbrt(long long n){",
		  "    long long ng=-1;",
		  "    long long ok=min((long long)(1e6),n);",
		  "    while(ng+1<ok){",
		  "        long long m=(ng+ok)/2;",
		  "        if(m*m*m>=n)ok=m;",
		  "        else ng=m;",
		  "    }",
		  "    return ok;",
		  "}"
		],
		"description": "ceil_qbrt"
	},
	"powll": {
		"prefix": "powll",
		"body": [
		  "long long powll(long long a,int b){",
		  "    long long res=1;",
		  "    for(int i=0;i<b;i++)res*=a;",
		  "    return res;",
		  "}"
		],
		"description": "powll"
	}
}